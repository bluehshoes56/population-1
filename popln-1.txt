# COMMAND ----------
# Module 3: Enhanced Merchant Presence Analysis

print("Analyzing merchant presence patterns with additional metrics...")

# Calculate how many months each merchant appears in the dataset
merchant_presence = spark.sql("""
    SELECT
        merchant_key,
        naics3,
        COUNT(DISTINCT txn_year_month) AS months_present,
        MIN(txn_year_month) AS first_month,
        MAX(txn_year_month) AS last_month,
        SUM(adjusted_sales) AS total_sales,
        SUM(txn_cnt) AS total_transactions
    FROM all_merchants
    GROUP BY merchant_key, naics3
""")

merchant_presence.createOrReplaceTempView("merchant_presence")

# Create distribution of merchant count by presence duration
presence_distribution = spark.sql("""
    SELECT
        naics3,
        SUM(CASE WHEN months_present = 0 THEN 1 ELSE 0 END) AS months_0,
        SUM(CASE WHEN months_present BETWEEN 1 AND 4 THEN 1 ELSE 0 END) AS months_1_4,
        SUM(CASE WHEN months_present BETWEEN 5 AND 8 THEN 1 ELSE 0 END) AS months_5_8,
        SUM(CASE WHEN months_present BETWEEN 9 AND 12 THEN 1 ELSE 0 END) AS months_9_12,
        SUM(CASE WHEN months_present = 13 THEN 1 ELSE 0 END) AS months_13,
        SUM(CASE WHEN months_present >= 14 THEN 1 ELSE 0 END) AS months_14_plus,
        COUNT(*) AS total_merchants
    FROM merchant_presence
    GROUP BY naics3
    ORDER BY naics3
""")

presence_distribution.createOrReplaceTempView("presence_distribution")

# Calculate percentage of merchants with full 14-month presence
presence_summary = spark.sql("""
    SELECT
        SUM(months_14_plus) AS merchants_14_plus_months,
        SUM(total_merchants) AS total_merchants,
        ROUND(SUM(months_14_plus) / SUM(total_merchants) * 100, 2) AS pct_with_14_plus_months
    FROM presence_distribution
""")

print("\nMerchant presence summary:")
presence_summary.show()

print("\nMerchant presence distribution by NAICS (sample):")
presence_distribution.show(10)

# COMMAND ----------
# NEW VIEWS: Enhanced metrics as requested

# VIEW 1: Total Sales by Month Buckets
sales_distribution = spark.sql("""
    SELECT
        naics3,
        SUM(CASE WHEN months_present = 0 THEN total_sales ELSE 0 END) AS sales_months_0,
        SUM(CASE WHEN months_present BETWEEN 1 AND 4 THEN total_sales ELSE 0 END) AS sales_months_1_4,
        SUM(CASE WHEN months_present BETWEEN 5 AND 8 THEN total_sales ELSE 0 END) AS sales_months_5_8,
        SUM(CASE WHEN months_present BETWEEN 9 AND 12 THEN total_sales ELSE 0 END) AS sales_months_9_12,
        SUM(CASE WHEN months_present = 13 THEN total_sales ELSE 0 END) AS sales_months_13,
        SUM(CASE WHEN months_present >= 14 THEN total_sales ELSE 0 END) AS sales_months_14_plus,
        SUM(total_sales) AS total_sales_all
    FROM merchant_presence
    GROUP BY naics3
    ORDER BY naics3
""")

sales_distribution.createOrReplaceTempView("sales_distribution")

# Add percentage columns for sales
sales_distribution_with_pct = spark.sql("""
    SELECT
        naics3,
        sales_months_0,
        sales_months_1_4,
        sales_months_5_8,
        sales_months_9_12,
        sales_months_13,
        sales_months_14_plus,
        total_sales_all,
        ROUND(sales_months_0 / total_sales_all * 100, 1) AS pct_sales_months_0,
        ROUND(sales_months_1_4 / total_sales_all * 100, 1) AS pct_sales_months_1_4,
        ROUND(sales_months_5_8 / total_sales_all * 100, 1) AS pct_sales_months_5_8,
        ROUND(sales_months_9_12 / total_sales_all * 100, 1) AS pct_sales_months_9_12,
        ROUND(sales_months_13 / total_sales_all * 100, 1) AS pct_sales_months_13,
        ROUND(sales_months_14_plus / total_sales_all * 100, 1) AS pct_sales_months_14_plus
    FROM sales_distribution
    WHERE total_sales_all > 0
""")

sales_distribution_with_pct.createOrReplaceTempView("sales_distribution_with_pct")

print("\nTotal Sales Distribution by Month Buckets:")
sales_distribution_with_pct.show(10)

# VIEW 2: Transaction Counts by Month Buckets
txn_distribution = spark.sql("""
    SELECT
        naics3,
        SUM(CASE WHEN months_present = 0 THEN total_transactions ELSE 0 END) AS txn_months_0,
        SUM(CASE WHEN months_present BETWEEN 1 AND 4 THEN total_transactions ELSE 0 END) AS txn_months_1_4,
        SUM(CASE WHEN months_present BETWEEN 5 AND 8 THEN total_transactions ELSE 0 END) AS txn_months_5_8,
        SUM(CASE WHEN months_present BETWEEN 9 AND 12 THEN total_transactions ELSE 0 END) AS txn_months_9_12,
        SUM(CASE WHEN months_present = 13 THEN total_transactions ELSE 0 END) AS txn_months_13,
        SUM(CASE WHEN months_present >= 14 THEN total_transactions ELSE 0 END) AS txn_months_14_plus,
        SUM(total_transactions) AS total_txn_all
    FROM merchant_presence
    GROUP BY naics3
    ORDER BY naics3
""")

txn_distribution.createOrReplaceTempView("txn_distribution")

# Add percentage columns for transactions
txn_distribution_with_pct = spark.sql("""
    SELECT
        naics3,
        txn_months_0,
        txn_months_1_4,
        txn_months_5_8,
        txn_months_9_12,
        txn_months_13,
        txn_months_14_plus,
        total_txn_all,
        ROUND(txn_months_0 / total_txn_all * 100, 1) AS pct_txn_months_0,
        ROUND(txn_months_1_4 / total_txn_all * 100, 1) AS pct_txn_months_1_4,
        ROUND(txn_months_5_8 / total_txn_all * 100, 1) AS pct_txn_months_5_8,
        ROUND(txn_months_9_12 / total_txn_all * 100, 1) AS pct_txn_months_9_12,
        ROUND(txn_months_13 / total_txn_all * 100, 1) AS pct_txn_months_13,
        ROUND(txn_months_14_plus / total_txn_all * 100, 1) AS pct_txn_months_14_plus
    FROM txn_distribution
    WHERE total_txn_all > 0
""")

txn_distribution_with_pct.createOrReplaceTempView("txn_distribution_with_pct")

print("\nTransaction Counts Distribution by Month Buckets:")
txn_distribution_with_pct.show(10)

# VIEW 3: Average Sales Per Merchant by Month Buckets
avg_sales_distribution = spark.sql("""
    SELECT
        s.naics3,
        CASE WHEN p.months_0 > 0 THEN ROUND(s.sales_months_0 / p.months_0, 2) ELSE 0 END AS avg_sales_months_0,
        CASE WHEN p.months_1_4 > 0 THEN ROUND(s.sales_months_1_4 / p.months_1_4, 2) ELSE 0 END AS avg_sales_months_1_4,
        CASE WHEN p.months_5_8 > 0 THEN ROUND(s.sales_months_5_8 / p.months_5_8, 2) ELSE 0 END AS avg_sales_months_5_8,
        CASE WHEN p.months_9_12 > 0 THEN ROUND(s.sales_months_9_12 / p.months_9_12, 2) ELSE 0 END AS avg_sales_months_9_12,
        CASE WHEN p.months_13 > 0 THEN ROUND(s.sales_months_13 / p.months_13, 2) ELSE 0 END AS avg_sales_months_13,
        CASE WHEN p.months_14_plus > 0 THEN ROUND(s.sales_months_14_plus / p.months_14_plus, 2) ELSE 0 END AS avg_sales_months_14_plus,
        CASE WHEN p.total_merchants > 0 THEN ROUND(s.total_sales_all / p.total_merchants, 2) ELSE 0 END AS avg_sales_all
    FROM sales_distribution s
    JOIN presence_distribution p ON s.naics3 = p.naics3
    ORDER BY s.naics3
""")

avg_sales_distribution.createOrReplaceTempView("avg_sales_distribution")

# Add percentage columns relative to overall average
avg_sales_pct_distribution = spark.sql("""
    SELECT
        naics3,
        avg_sales_months_0,
        avg_sales_months_1_4,
        avg_sales_months_5_8,
        avg_sales_months_9_12,
        avg_sales_months_13,
        avg_sales_months_14_plus,
        avg_sales_all,
        CASE WHEN avg_sales_all > 0 THEN ROUND(avg_sales_months_0 / avg_sales_all * 100, 1) ELSE 0 END AS pct_avg_months_0,
        CASE WHEN avg_sales_all > 0 THEN ROUND(avg_sales_months_1_4 / avg_sales_all * 100, 1) ELSE 0 END AS pct_avg_months_1_4,
        CASE WHEN avg_sales_all > 0 THEN ROUND(avg_sales_months_5_8 / avg_sales_all * 100, 1) ELSE 0 END AS pct_avg_months_5_8,
        CASE WHEN avg_sales_all > 0 THEN ROUND(avg_sales_months_9_12 / avg_sales_all * 100, 1) ELSE 0 END AS pct_avg_months_9_12,
        CASE WHEN avg_sales_all > 0 THEN ROUND(avg_sales_months_13 / avg_sales_all * 100, 1) ELSE 0 END AS pct_avg_months_13,
        CASE WHEN avg_sales_all > 0 THEN ROUND(avg_sales_months_14_plus / avg_sales_all * 100, 1) ELSE 0 END AS pct_avg_months_14_plus
    FROM avg_sales_distribution
    WHERE avg_sales_all > 0
""")

avg_sales_pct_distribution.createOrReplaceTempView("avg_sales_pct_distribution")

print("\nAverage Sales Per Merchant by Month Buckets:")
avg_sales_pct_distribution.show(10)

# COMMAND ----------
# VIEW 4: Simplified comparison (>=14 months vs <=13 months)

# Merchant counts simplified
merchant_presence_simplified = spark.sql("""
    SELECT
        naics3,
        SUM(CASE WHEN months_present <= 13 THEN 1 ELSE 0 END) AS merchants_13_or_less,
        SUM(CASE WHEN months_present >= 14 THEN 1 ELSE 0 END) AS merchants_14_plus,
        COUNT(*) AS total_merchants,
        ROUND(SUM(CASE WHEN months_present <= 13 THEN 1 ELSE 0 END) / COUNT(*) * 100, 1) AS pct_merchants_13_or_less,
        ROUND(SUM(CASE WHEN months_present >= 14 THEN 1 ELSE 0 END) / COUNT(*) * 100, 1) AS pct_merchants_14_plus
    FROM merchant_presence
    GROUP BY naics3
    ORDER BY naics3
""")

merchant_presence_simplified.createOrReplaceTempView("merchant_presence_simplified")

print("\nSimplified Merchant Counts (≤13 vs ≥14 months):")
merchant_presence_simplified.show(10)

# Sales simplified
sales_simplified = spark.sql("""
    SELECT
        naics3,
        SUM(CASE WHEN months_present <= 13 THEN total_sales ELSE 0 END) AS sales_13_or_less,
        SUM(CASE WHEN months_present >= 14 THEN total_sales ELSE 0 END) AS sales_14_plus,
        SUM(total_sales) AS total_sales,
        ROUND(SUM(CASE WHEN months_present <= 13 THEN total_sales ELSE 0 END) / SUM(total_sales) * 100, 1) AS pct_sales_13_or_less,
        ROUND(SUM(CASE WHEN months_present >= 14 THEN total_sales ELSE 0 END) / SUM(total_sales) * 100, 1) AS pct_sales_14_plus
    FROM merchant_presence
    GROUP BY naics3
    ORDER BY naics3
""")

sales_simplified.createOrReplaceTempView("sales_simplified")

print("\nSimplified Sales (≤13 vs ≥14 months):")
sales_simplified.show(10)

# Transaction counts simplified
txn_simplified = spark.sql("""
    SELECT
        naics3,
        SUM(CASE WHEN months_present <= 13 THEN total_transactions ELSE 0 END) AS txn_13_or_less,
        SUM(CASE WHEN months_present >= 14 THEN total_transactions ELSE 0 END) AS txn_14_plus,
        SUM(total_transactions) AS total_txn,
        ROUND(SUM(CASE WHEN months_present <= 13 THEN total_transactions ELSE 0 END) / SUM(total_transactions) * 100, 1) AS pct_txn_13_or_less,
        ROUND(SUM(CASE WHEN months_present >= 14 THEN total_transactions ELSE 0 END) / SUM(total_transactions) * 100, 1) AS pct_txn_14_plus
    FROM merchant_presence
    GROUP BY naics3
    ORDER BY naics3
""")

txn_simplified.createOrReplaceTempView("txn_simplified")

print("\nSimplified Transaction Counts (≤13 vs ≥14 months):")
txn_simplified.show(10)

# Average sales per merchant simplified
avg_sales_simplified = spark.sql("""
    SELECT
        m.naics3,
        CASE WHEN m.merchants_13_or_less > 0 
             THEN ROUND(s.sales_13_or_less / m.merchants_13_or_less, 2) 
             ELSE 0 
        END AS avg_sales_13_or_less,
        CASE WHEN m.merchants_14_plus > 0 
             THEN ROUND(s.sales_14_plus / m.merchants_14_plus, 2) 
             ELSE 0 
        END AS avg_sales_14_plus,
        CASE WHEN m.total_merchants > 0 
             THEN ROUND(s.total_sales / m.total_merchants, 2) 
             ELSE 0 
        END AS avg_sales_all,
        CASE WHEN m.total_merchants > 0 AND s.total_sales > 0
             THEN ROUND((s.sales_13_or_less / m.merchants_13_or_less) / (s.total_sales / m.total_merchants) * 100, 1)
             ELSE 0
        END AS pct_avg_13_or_less,
        CASE WHEN m.total_merchants > 0 AND s.total_sales > 0
             THEN ROUND((s.sales_14_plus / m.merchants_14_plus) / (s.total_sales / m.total_merchants) * 100, 1)
             ELSE 0
        END AS pct_avg_14_plus
    FROM merchant_presence_simplified m
    JOIN sales_simplified s ON m.naics3 = s.naics3
    WHERE m.merchants_13_or_less > 0 AND m.merchants_14_plus > 0
    ORDER BY m.naics3
""")

avg_sales_simplified.createOrReplaceTempView("avg_sales_simplified")

print("\nSimplified Average Sales Per Merchant (≤13 vs ≥14 months):")
avg_sales_simplified.show(10)

# COMMAND ----------
# Create dashboard-ready visualization data

print("Creating dashboard-ready visualization data...")

# Comprehensive dashboard data
dashboard_data = spark.sql("""
    SELECT
        p.naics3,
        p.total_merchants,
        p.merchants_13_or_less,
        p.merchants_14_plus,
        p.pct_merchants_13_or_less,
        p.pct_merchants_14_plus,
        s.total_sales,
        s.sales_13_or_less,
        s.sales_14_plus,
        s.pct_sales_13_or_less,
        s.pct_sales_14_plus,
        t.total_txn,
        t.txn_13_or_less,
        t.txn_14_plus,
        t.pct_txn_13_or_less,
        t.pct_txn_14_plus,
        a.avg_sales_13_or_less,
        a.avg_sales_14_plus,
        a.avg_sales_all
    FROM merchant_presence_simplified p
    JOIN sales_simplified s ON p.naics3 = s.naics3
    JOIN txn_simplified t ON p.naics3 = t.naics3
    JOIN avg_sales_simplified a ON p.naics3 = a.naics3
    WHERE p.total_merchants > 100  -- Focus on NAICS with significant merchant counts
    ORDER BY p.total_merchants DESC
""")

dashboard_data.createOrReplaceTempView("merchant_presence_dashboard")

print("\nDashboard-ready merchant presence data:")
dashboard_data.show(10)

# Instructions for dashboard visualization
print("""
Dashboard Visualization Instructions:
1. Use bar charts for visualizing merchant counts by NAICS and month buckets
2. Use stacked area charts for sales distribution visualization
3. Create comparison charts for ≤13 vs ≥14 months metrics
4. Add filters for NAICS codes and sales thresholds
""")

# COMMAND ----------
