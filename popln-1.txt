# COMMAND ----------
# Process Excel file to handle "Other" reason codes

# Import required libraries
from pyspark.sql.functions import col, when, lit

print("Processing NAICS6 Excel file to handle 'Other' reason codes...")

# Read Excel file from workspace
excel_path = "/Workspace/input/NAICS6_check_shared_by_Dan.xlsx"

# Read Excel file and process
try:
    # Read the Excel file into a pandas DataFrame first
    import pandas as pd
    excel_df = pd.read_excel(excel_path)
    
    # Convert pandas DataFrame to Spark DataFrame
    naics6_excel = spark.createDataFrame(excel_df)
    
    print(f"Successfully read Excel file with {naics6_excel.count()} rows")
    print("Excel columns:", naics6_excel.columns)
    
    # Display a sample of the Excel data
    print("Sample of Excel data:")
    display(naics6_excel.limit(5))
    
    # Identify NAICS3 values that have some rows with "Other" reason
    naics3_with_other = naics6_excel.filter(col("Reason") == "Other").select("NAICS3").distinct()
    other_naics3_list = [row.NAICS3 for row in naics3_with_other.collect()]
    
    print(f"Found {len(other_naics3_list)} NAICS3 codes with 'Other' reason: {other_naics3_list}")
    
    # Create a mapping for naics3_description for these "Other" categories
    naics3_other_description_mapping = {}
    
    for naics3_code in other_naics3_list:
        naics3_other_description_mapping[naics3_code] = f"Combined 'Other' categories within NAICS3 {naics3_code}"
    
    print("Created description mapping for 'Other' categories:", naics3_other_description_mapping)
    
    # Update the all_mids dataframe to handle these "Other" categories
    # First, create a new column to flag rows that need special handling
    all_mids = all_mids.withColumn("naics3_has_other", 
                                  when(col("naics3").isin(other_naics3_list), True)
                                  .otherwise(False))
    
    # Now update the description for these rows
    for naics3_code in other_naics3_list:
        all_mids = all_mids.withColumn("naics3_description", 
                                      when((col("naics3") == naics3_code) & 
                                           (col("naics6").isin([row.NAICS6 for row in 
                                                              naics6_excel.filter((col("NAICS3") == naics3_code) & 
                                                                                  (col("Reason") == "Other")).select("NAICS6").collect()])),
                                           lit(naics3_other_description_mapping[naics3_code]))
                                      .otherwise(col("naics3_description")))
    
    print("Updated descriptions for NAICS codes with 'Other' reason")
    
    # Show sample of updated descriptions
    print("\nSample of updated descriptions:")
    display(all_mids.filter(col("naics3_has_other") == True)
            .select("naics3", "naics6", "naics3_description")
            .distinct()
            .limit(10))
    
    # Remove the temporary flag column
    all_mids = all_mids.drop("naics3_has_other")
    
except Exception as e:
    print(f"Error processing Excel file: {e}")
    print("Continuing without Excel processing")

# Update the view with the new dataframe
all_mids.createOrReplaceTempView("all_merchants")
print("View updated successfully")

# COMMAND ----------
