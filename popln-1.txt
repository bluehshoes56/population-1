# COMMAND ----------
# Module 2: Data Loading and NAICS Mapping/Regrouping

# Import required libraries
from pyspark.sql import SparkSession
from pyspark.sql.functions import *
from pyspark.sql.types import *
import pandas as pd

print("Loading merchant data...")

# COMMAND ----------
# Reading the merchant data
all_mids = spark.sql("""
    SELECT *,
        CASE 
            WHEN latitude IS NULL AND address IS NULL THEN siteid
            WHEN naics3 IS NULL AND (latitude IS NULL OR TRIM(latitude) = '') THEN siteid
            WHEN latitude IS NULL OR TRIM(latitude) = '' THEN CONCAT(tax_id, '_', naics3, '_', address)
            WHEN (naics3 IS NULL AND latitude IS NOT NULL) THEN CONCAT(tax_id, '_', mcc_code, '_', 
                latitude, '_', longitude)
            ELSE CONCAT(tax_id, '_', naics3, '_', latitude, '_', longitude)
        END AS merchant_key
    FROM prod_dcs_catalog.fsbi_live.mid_monthly_sb_flag_sba_threshold_process
    WHERE 
        adjusted_sales > 0
""")

# Convert adjusted_sales to float type to avoid type errors
all_mids = all_mids.withColumn("adjusted_sales", col("adjusted_sales").cast("float"))

# Register temporary view for SQL operations
all_mids.createOrReplaceTempView("all_merchants")

print(f"Loaded {all_mids.count()} merchant records")

# COMMAND ----------
# STEP 1: MCC to NAICS6 mapping
print("Step 1: Applying MCC to NAICS6 mapping...")

naics6_mapping = spark.sql("""
    SELECT mcc_code, naics6 
    FROM prod_dcs_catalog.fsbi_live.mcc_to_naics_mapping
""")
naics6_mapping.createOrReplaceTempView("naics6_mapping")

# Apply mapping to all_mids dataframe
all_mids = spark.sql("""
    SELECT a.*, 
           COALESCE(n.naics6, a.naics6) as naics6_mapped
    FROM all_merchants a
    LEFT JOIN naics6_mapping n ON a.mcc_code = n.mcc_code
""")

print("Successfully applied MCC to NAICS6 mapping")

# COMMAND ----------
# STEP 2: NAICS3 extraction from NAICS6
print("Step 2: Extracting NAICS3 from NAICS6...")

all_mids = all_mids.withColumn("naics3_from_naics6", 
                               when(col("naics6_mapped").isNotNull() & (length(col("naics6_mapped")) >= 3), 
                                    substring(col("naics6_mapped"), 1, 3))
                               .otherwise(col("naics3")))

# COMMAND ----------
# STEP 3: NAICS Alignment and Regrouping
print("Step 3: Applying NAICS alignment rules...")

# Initialize with original values
all_mids = all_mids.withColumn("naics6_aligned", col("naics6_mapped"))
all_mids = all_mids.withColumn("naics3_aligned", col("naics3_from_naics6"))

# Rule 1: NAICS 336 → 459
all_mids = all_mids.withColumn("naics6_aligned", 
    when(col("naics3_from_naics6") == "336", "459999")
    .otherwise(col("naics6_aligned"))
)

all_mids = all_mids.withColumn("naics3_aligned", 
    when(col("naics3_from_naics6") == "336", "459")
    .otherwise(col("naics3_aligned"))
)

# Rule 2: NAICS 311 → 722
all_mids = all_mids.withColumn("naics6_aligned", 
    when(col("naics3_aligned") == "311", "722513")
    .otherwise(col("naics6_aligned"))
)

all_mids = all_mids.withColumn("naics3_aligned", 
    when(col("naics3_aligned") == "311", "722")
    .otherwise(col("naics3_aligned"))
)

# Rule 3: NAICS 92 → 713
all_mids = all_mids.withColumn("naics6_aligned", 
    when(col("naics3_aligned") == "92", "7131")
    .otherwise(col("naics6_aligned"))
)

# Rule 4: NAICS 486 → 457
all_mids = all_mids.withColumn("naics3_aligned", 
    when(col("naics3_aligned") == "486", "457")
    .otherwise(col("naics3_aligned"))
)

all_mids = all_mids.withColumn("naics6_aligned", 
    when(col("naics3_aligned") == "457", "457210")
    .otherwise(col("naics6_aligned"))
)

# Rule 5: MCC code specific alignments
all_mids = all_mids.withColumn("naics6_aligned", 
    when(col("mcc_code").isin("5541", "5542", "7511"), "457110")
    .otherwise(col("naics6_aligned"))
)

all_mids = all_mids.withColumn("naics3_aligned", 
    when(col("mcc_code").isin("7801", "713"), "713")
    .otherwise(col("naics3_aligned"))
)

print("Applied NAICS alignment rules")

# COMMAND ----------
# STEP 4: Drop specific NAICS categories
print("Step 4: Dropping specified NAICS categories...")
print(f"Before filtering - Total merchants: {all_mids.count()}")

# Drop NAICS 524 (Insurance Carriers), 531 (Real Estate), 221 (Utilities)
all_mids_filtered = all_mids.filter(
    ~col("naics3_aligned").isin("524", "531", "221")
)

print(f"After filtering - Total merchants: {all_mids_filtered.count()}")
dropped_count = all_mids.count() - all_mids_filtered.count()
print(f"Dropped {dropped_count} merchants from excluded NAICS categories")

# Update the main dataframe reference
all_mids = all_mids_filtered

# COMMAND ----------
# STEP 5: Add NAICS from Excel file
print("Step 5: Reading additional NAICS categories from Excel...")

# Read Excel file from workspace
excel_path = "/Workspace/input/NAICS6_check_shared_by_Dan.xlsx"

# Convert Excel to Pandas DataFrame first, then to Spark DataFrame
try:
    # Read Excel file using pandas
    excel_pandas_df = pd.read_excel(excel_path, sheet_name=0)  # Read first sheet
    
    # Convert to Spark DataFrame
    additional_naics_df = spark.createDataFrame(excel_pandas_df)
    
    print("Excel file columns:", additional_naics_df.columns)
    print(f"Additional NAICS records: {additional_naics_df.count()}")
    
    # Show sample of Excel data
    print("Sample from Excel file:")
    additional_naics_df.show(5, truncate=False)
    
    # Filter for records to keep (where Reason column indicates "Leave it in")
    if "Reason" in additional_naics_df.columns:
        keep_records = additional_naics_df.filter(
            col("Reason").contains("Leave it in") | 
            col("Reason").isNull()
        )
        print(f"Records to keep: {keep_records.count()}")
    
except Exception as e:
    print(f"Warning: Could not read Excel file: {e}")
    print("Continuing without additional NAICS data")

# COMMAND ----------
# Create final merchant_key using aligned NAICS
all_mids = all_mids.withColumn("merchant_key_final",
    when(col("latitude").isNull() & col("address").isNull(), col("siteid"))
    .when(col("naics3_aligned").isNull() & (col("latitude").isNull() | (trim(col("latitude")) == "")), col("siteid"))
    .when(col("latitude").isNull() | (trim(col("latitude")) == ""), 
          concat(col("tax_id"), lit("_"), col("naics3_aligned"), lit("_"), col("address")))
    .when(col("naics3_aligned").isNull() & col("latitude").isNotNull(), 
          concat(col("tax_id"), lit("_"), col("mcc_code"), lit("_"), col("latitude"), lit("_"), col("longitude")))
    .otherwise(concat(col("tax_id"), lit("_"), col("naics3_aligned"), lit("_"), col("latitude"), lit("_"), col("longitude")))
)

# Register updated temporary view
all_mids.createOrReplaceTempView("all_merchants")

# COMMAND ----------
# Display final statistics
merchant_count = all_mids.count()
naics_count = all_mids.select("naics3_aligned").distinct().count()
month_count = all_mids.select("txn_year_month").distinct().count()

print(f"Final merchant count: {merchant_count}")
print(f"Distinct aligned NAICS3 codes: {naics_count}")
print(f"Months in dataset: {month_count}")

# Show sample of alignment results
print("\nSample of NAICS alignment results:")
all_mids.select("naics3", "naics3_aligned", "naics6_aligned", "mcc_code").distinct().show(20, truncate=False)

# Show alignment summary
print("\nNAICS3 alignment summary:")
all_mids.groupBy("naics3", "naics3_aligned").count().orderBy("count", ascending=False).show(20, truncate=False)

print("Module 2: Data Loading and NAICS Mapping completed successfully!")

# COMMAND ----------
