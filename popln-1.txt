#d

# COMMAND ----------
# Fixed Cohort Analysis - Create Clean, Readable Cohort Tracking Outputs
# This fixes the missing table dependency error from the screenshot

print("Creating clean, readable cohort analysis outputs...")

# COMMAND ----------
# Step 1: First ensure we have the base cohort tracking data

cohort_retention_data = spark.sql("""
WITH all_reference_months AS (
    SELECT DISTINCT reference_month
    FROM merchant_window_analysis_enhanced
    WHERE reference_month >= 202002  -- Start from Feb 2020
    ORDER BY reference_month
),
feb_2020_cohort AS (
    SELECT DISTINCT 
        merchant_key,
        naics3
    FROM merchant_window_analysis_enhanced
    WHERE reference_month = 202002 
    AND presence_category = 'full_presence_14'
),
cohort_presence_by_month AS (
    SELECT 
        arm.reference_month,
        fc.merchant_key,
        fc.naics3,
        mw.presence_category,
        mw.total_sales_in_window,
        mw.total_txn_in_window,
        CASE WHEN mw.merchant_key IS NOT NULL AND mw.total_sales_in_window > 0 THEN 1 ELSE 0 END as is_active,
        CASE WHEN mw.presence_category = 'full_presence_14' THEN 1 ELSE 0 END as has_full_presence
    FROM all_reference_months arm
    CROSS JOIN feb_2020_cohort fc
    LEFT JOIN merchant_window_analysis_enhanced mw ON fc.merchant_key = mw.merchant_key 
                                                    AND fc.naics3 = mw.naics3
                                                    AND arm.reference_month = mw.reference_month
)
SELECT 
    reference_month,
    COUNT(DISTINCT merchant_key) as total_cohort_merchants,
    SUM(is_active) as active_merchants,
    SUM(has_full_presence) as full_presence_merchants,
    SUM(CASE WHEN is_active = 0 THEN 1 ELSE 0 END) as inactive_merchants,
    SUM(CASE WHEN is_active = 1 AND has_full_presence = 0 THEN 1 ELSE 0 END) as active_but_not_full_presence,
    SUM(total_sales_in_window) as total_cohort_sales,
    SUM(total_txn_in_window) as total_cohort_transactions
FROM cohort_presence_by_month
GROUP BY reference_month
ORDER BY reference_month
""")

cohort_retention_data.createOrReplaceTempView("cohort_tracking")

print("Base cohort tracking data created successfully")

# COMMAND ----------
# Step 2: Create the cohort retention analysis table with percentages

cohort_retention_analysis = spark.sql("""
WITH baseline_count AS (
    SELECT MAX(total_cohort_merchants) as baseline_count 
    FROM cohort_tracking 
    WHERE reference_month = 202002
)
SELECT 
    CONCAT(SUBSTR(CAST(ct.reference_month AS STRING), 1, 4), '-', 
           SUBSTR(CAST(ct.reference_month AS STRING), 5, 2)) as ref_month,
    ct.reference_month,
    
    -- Merchant counts
    ct.total_cohort_merchants,
    ct.active_merchants,
    ct.full_presence_merchants,
    ct.inactive_merchants,
    ct.active_but_not_full_presence,
    
    -- Retention percentages (based on baseline Feb 2020 count)
    ROUND(ct.active_merchants * 100.0 / bc.baseline_count, 2) as pct_active_retention,
    ROUND(ct.full_presence_merchants * 100.0 / bc.baseline_count, 2) as pct_full_presence_retention,
    ROUND(ct.inactive_merchants * 100.0 / bc.baseline_count, 2) as pct_lost,
    ROUND(ct.active_but_not_full_presence * 100.0 / bc.baseline_count, 2) as pct_active_but_partial,
    
    -- Month-over-month retention
    LAG(ct.active_merchants) OVER (ORDER BY ct.reference_month) as prev_month_active,
    CASE WHEN LAG(ct.active_merchants) OVER (ORDER BY ct.reference_month) > 0
         THEN ROUND((ct.active_merchants - LAG(ct.active_merchants) OVER (ORDER BY ct.reference_month)) * 100.0 / 
                    LAG(ct.active_merchants) OVER (ORDER BY ct.reference_month), 2)
         ELSE 0 END as month_over_month_change_pct,
    
    -- Sales metrics
    ct.total_cohort_sales,
    ct.total_cohort_transactions,
    CASE WHEN ct.active_merchants > 0 
         THEN ROUND(ct.total_cohort_sales / ct.active_merchants, 0) 
         ELSE 0 END as avg_sales_per_active_merchant

FROM cohort_tracking ct
CROSS JOIN baseline_count bc
ORDER BY ct.reference_month
""")

cohort_retention_analysis.createOrReplaceTempView("cohort_retention_analysis")

print("Cohort retention analysis table created successfully")
cohort_retention_analysis.show(10)

# COMMAND ----------
# Step 3: Create Clean Pivot Table - Metrics as Rows, Months as Columns

cohort_pivot_table = spark.sql("""
WITH cohort_data AS (
    SELECT 
        CONCAT(SUBSTR(CAST(reference_month AS STRING), 1, 4), '-', 
               SUBSTR(CAST(reference_month AS STRING), 5, 2)) as month,
        reference_month,
        active_merchants,
        full_presence_merchants,
        pct_active_retention,
        pct_full_presence_retention
    FROM cohort_retention_analysis
    ORDER BY reference_month
)
SELECT 
    'Active Merchants' as metric,
    MAX(CASE WHEN month = '2020-02' THEN active_merchants END) as feb_2020,
    MAX(CASE WHEN month = '2020-03' THEN active_merchants END) as mar_2020,
    MAX(CASE WHEN month = '2020-06' THEN active_merchants END) as jun_2020,
    MAX(CASE WHEN month = '2020-12' THEN active_merchants END) as dec_2020,
    MAX(CASE WHEN month = '2021-06' THEN active_merchants END) as jun_2021,
    MAX(CASE WHEN month = '2021-12' THEN active_merchants END) as dec_2021,
    MAX(CASE WHEN month = '2022-06' THEN active_merchants END) as jun_2022,
    MAX(CASE WHEN month = '2022-12' THEN active_merchants END) as dec_2022,
    MAX(CASE WHEN month = '2023-06' THEN active_merchants END) as jun_2023,
    MAX(CASE WHEN month = '2023-12' THEN active_merchants END) as dec_2023,
    MAX(CASE WHEN month = '2024-06' THEN active_merchants END) as jun_2024,
    MAX(CASE WHEN month = '2024-12' THEN active_merchants END) as dec_2024,
    MAX(CASE WHEN month = '2025-04' THEN active_merchants END) as apr_2025
FROM cohort_data

UNION ALL

SELECT 
    'Active Retention %' as metric,
    MAX(CASE WHEN month = '2020-02' THEN pct_active_retention END) as feb_2020,
    MAX(CASE WHEN month = '2020-03' THEN pct_active_retention END) as mar_2020,
    MAX(CASE WHEN month = '2020-06' THEN pct_active_retention END) as jun_2020,
    MAX(CASE WHEN month = '2020-12' THEN pct_active_retention END) as dec_2020,
    MAX(CASE WHEN month = '2021-06' THEN pct_active_retention END) as jun_2021,
    MAX(CASE WHEN month = '2021-12' THEN pct_active_retention END) as dec_2021,
    MAX(CASE WHEN month = '2022-06' THEN pct_active_retention END) as jun_2022,
    MAX(CASE WHEN month = '2022-12' THEN pct_active_retention END) as dec_2022,
    MAX(CASE WHEN month = '2023-06' THEN pct_active_retention END) as jun_2023,
    MAX(CASE WHEN month = '2023-12' THEN pct_active_retention END) as dec_2023,
    MAX(CASE WHEN month = '2024-06' THEN pct_active_retention END) as jun_2024,
    MAX(CASE WHEN month = '2024-12' THEN pct_active_retention END) as dec_2024,
    MAX(CASE WHEN month = '2025-04' THEN pct_active_retention END) as apr_2025
FROM cohort_data

UNION ALL

SELECT 
    'Full Presence Merchants' as metric,
    MAX(CASE WHEN month = '2020-02' THEN full_presence_merchants END) as feb_2020,
    MAX(CASE WHEN month = '2020-03' THEN full_presence_merchants END) as mar_2020,
    MAX(CASE WHEN month = '2020-06' THEN full_presence_merchants END) as jun_2020,
    MAX(CASE WHEN month = '2020-12' THEN full_presence_merchants END) as dec_2020,
    MAX(CASE WHEN month = '2021-06' THEN full_presence_merchants END) as jun_2021,
    MAX(CASE WHEN month = '2021-12' THEN full_presence_merchants END) as dec_2021,
    MAX(CASE WHEN month = '2022-06' THEN full_presence_merchants END) as jun_2022,
    MAX(CASE WHEN month = '2022-12' THEN full_presence_merchants END) as dec_2022,
    MAX(CASE WHEN month = '2023-06' THEN full_presence_merchants END) as jun_2023,
    MAX(CASE WHEN month = '2023-12' THEN full_presence_merchants END) as dec_2023,
    MAX(CASE WHEN month = '2024-06' THEN full_presence_merchants END) as jun_2024,
    MAX(CASE WHEN month = '2024-12' THEN full_presence_merchants END) as dec_2024,
    MAX(CASE WHEN month = '2025-04' THEN full_presence_merchants END) as apr_2025
FROM cohort_data

UNION ALL

SELECT 
    'Full Presence Retention %' as metric,
    MAX(CASE WHEN month = '2020-02' THEN pct_full_presence_retention END) as feb_2020,
    MAX(CASE WHEN month = '2020-03' THEN pct_full_presence_retention END) as mar_2020,
    MAX(CASE WHEN month = '2020-06' THEN pct_full_presence_retention END) as jun_2020,
    MAX(CASE WHEN month = '2020-12' THEN pct_full_presence_retention END) as dec_2020,
    MAX(CASE WHEN month = '2021-06' THEN pct_full_presence_retention END) as jun_2021,
    MAX(CASE WHEN month = '2021-12' THEN pct_full_presence_retention END) as dec_2021,
    MAX(CASE WHEN month = '2022-06' THEN pct_full_presence_retention END) as jun_2022,
    MAX(CASE WHEN month = '2022-12' THEN pct_full_presence_retention END) as dec_2022,
    MAX(CASE WHEN month = '2023-06' THEN pct_full_presence_retention END) as jun_2023,
    MAX(CASE WHEN month = '2023-12' THEN pct_full_presence_retention END) as dec_2023,
    MAX(CASE WHEN month = '2024-06' THEN pct_full_presence_retention END) as jun_2024,
    MAX(CASE WHEN month = '2024-12' THEN pct_full_presence_retention END) as dec_2024,
    MAX(CASE WHEN month = '2025-04' THEN pct_full_presence_retention END) as apr_2025
FROM cohort_data

ORDER BY 
    CASE metric 
        WHEN 'Active Merchants' THEN 1
        WHEN 'Active Retention %' THEN 2  
        WHEN 'Full Presence Merchants' THEN 3
        WHEN 'Full Presence Retention %' THEN 4
    END
""")

cohort_pivot_table.createOrReplaceTempView("cohort_pivot_table")

print("ðŸ“Š Clean Cohort Pivot Table (Metrics as Rows, Months as Columns):")
cohort_pivot_table.show(10, truncate=False)

# COMMAND ----------
# Step 4: Create Clean Monthly Format with Formatted Numbers

cohort_monthly_clean = spark.sql("""
SELECT 
    CONCAT(SUBSTR(CAST(reference_month AS STRING), 1, 4), '-', 
           SUBSTR(CAST(reference_month AS STRING), 5, 2)) as month,
    FORMAT_NUMBER(active_merchants, 0) as active_merchants,
    CONCAT(ROUND(pct_active_retention, 1), '%') as active_retention_pct,
    FORMAT_NUMBER(full_presence_merchants, 0) as full_presence_merchants,
    CONCAT(ROUND(pct_full_presence_retention, 1), '%') as full_presence_retention_pct,
    FORMAT_NUMBER(inactive_merchants, 0) as lost_merchants,
    CONCAT(ROUND(pct_lost, 1), '%') as lost_pct,
    
    -- Sales metrics formatted
    CASE 
        WHEN total_cohort_sales >= 1000000000 THEN CONCAT(ROUND(total_cohort_sales/1000000000, 1), 'B')
        WHEN total_cohort_sales >= 1000000 THEN CONCAT(ROUND(total_cohort_sales/1000000, 1), 'M')
        WHEN total_cohort_sales >= 1000 THEN CONCAT(ROUND(total_cohort_sales/1000, 1), 'K')
        ELSE FORMAT_NUMBER(total_cohort_sales, 0)
    END as total_sales_formatted,
    
    CASE 
        WHEN avg_sales_per_active_merchant >= 1000000 THEN CONCAT(ROUND(avg_sales_per_active_merchant/1000000, 1), 'M')
        WHEN avg_sales_per_active_merchant >= 1000 THEN CONCAT(ROUND(avg_sales_per_active_merchant/1000, 1), 'K')
        ELSE FORMAT_NUMBER(avg_sales_per_active_merchant, 0)
    END as avg_sales_per_merchant

FROM cohort_retention_analysis
ORDER BY reference_month
""")

cohort_monthly_clean.createOrReplaceTempView("cohort_monthly_clean")

print("ðŸ“ˆ Clean Monthly Format (Last 12 Months):")
cohort_monthly_clean.orderBy(col("month").desc()).show(12, truncate=False)

# COMMAND ----------
# Step 5: Export to CSV Files

# Export monthly time series
cohort_retention_analysis.coalesce(1).write.mode("overwrite").option("header", "true").csv("abfss://df-dcs-ext-ind-ds-utils@azpdatafactoryprodadls.dfs.core.windows.net/FSBI/spendtrend/cohort_monthly_timeseries")

# Export clean formatted monthly data
cohort_monthly_clean.coalesce(1).write.mode("overwrite").option("header", "true").csv("abfss://df-dcs-ext-ind-ds-utils@azpdatafactoryprodadls.dfs.core.windows.net/FSBI/spendtrend/cohort_monthly_clean")

# Export pivot table
cohort_pivot_table.coalesce(1).write.mode("overwrite").option("header", "true").csv("abfss://df-dcs-ext-ind-ds-utils@azpdatafactoryprodadls.dfs.core.windows.net/FSBI/spendtrend/cohort_pivot_table")

print("âœ… Files exported successfully to Azure storage!")
print("""
ðŸ“Š Clean Cohort Analysis Complete!

Files Created:
1. cohort_monthly_timeseries - Raw monthly retention data
2. cohort_monthly_clean - Formatted monthly data for dashboards  
3. cohort_pivot_table - Excel-style pivot (metrics as rows, months as columns)

Ready for Azure Databricks dashboard integration!
""")

# COMMAND ----------
