# COMMAND ----------
# Process NAICS6 codes from Excel file and update descriptions for "Other" reason codes

# Import required libraries
from pyspark.sql.functions import col, when, lit

print("Processing NAICS6 Excel file to handle 'Other' reason codes...")

# Read Excel file from workspace
excel_path = "/Workspace/input/NAICS6_check_shared_by_Dan.xlsx"

# Read Excel file and process
try:
    # Read the Excel file into a pandas DataFrame first
    import pandas as pd
    excel_pandas_df = pd.read_excel(excel_path, sheet_name=0)  # Read first sheet
    
    # Convert to Spark DataFrame
    naics6_excel = spark.createDataFrame(excel_pandas_df)
    
    print("Excel file columns:", naics6_excel.columns)
    print(f"Additional NAICS records: {naics6_excel.count()}")
    
    # Show sample of Excel data
    print("Sample from Excel file:")
    naics6_excel.show(5, truncate=False)
    
    # Step 1: Find all NAICS3 codes that have entries with "Other" reason
    naics3_with_other = naics6_excel.filter(col("Reason") == "Other") \
                                  .select("NAICS3") \
                                  .distinct()
    
    other_naics3_list = [row.NAICS3 for row in naics3_with_other.collect()]
    print(f"NAICS3 codes with 'Other' reason: {other_naics3_list}")
    
    # Step 2: Find all NAICS6 codes within each NAICS3 that have "Other" reason
    other_naics6_by_naics3 = {}
    
    for naics3_code in other_naics3_list:
        other_naics6_codes = [
            row.NAICS6 for row in naics6_excel.filter(
                (col("NAICS3") == naics3_code) & 
                (col("Reason") == "Other")
            ).select("NAICS6").collect()
        ]
        other_naics6_by_naics3[naics3_code] = other_naics6_codes
    
    print("NAICS6 codes with 'Other' reason by NAICS3:")
    for naics3, naics6_list in other_naics6_by_naics3.items():
        print(f"  NAICS3 {naics3}: {naics6_list}")
    
    # Step 3: Update descriptions in all_mids for these specific NAICS6 codes
    for naics3_code, naics6_list in other_naics6_by_naics3.items():
        # Create description string according to requirement
        other_description = f"Reason value of Other was combined within this naics3 {naics3_code}"
        
        # Update the description for all rows matching these NAICS6 codes
        all_mids = all_mids.withColumn(
            "naics3_description",
            when(
                (col("naics3") == naics3_code) & (col("naics6").isin(naics6_list)),
                lit(other_description)
            ).otherwise(col("naics3_description"))
        )
        
        print(f"Updated description for NAICS3 {naics3_code} 'Other' categories")
    
    # Update the view
    all_mids.createOrReplaceTempView("all_merchants")
    print("View updated successfully with 'Other' reason handling")
    
except Exception as e:
    print(f"Error processing Excel file: {e}")
    import traceback
    traceback.print_exc()
    print("Continuing without Excel processing")

# COMMAND ----------
# Display details specifically for NAICS3 codes 423 and 444

print("Details for NAICS3 codes 423 and 444:")

# Filter for just these codes
target_naics = ["423", "444"]
naics_details = all_mids.filter(col("naics3").isin(target_naics))

# 1. Count by NAICS3
naics3_counts = naics_details.groupBy("naics3", "naics3_description") \
                            .count() \
                            .orderBy("naics3")

print("Record counts by NAICS3:")
display(naics3_counts)

# 2. Count by NAICS6 within these NAICS3 codes
naics6_counts = naics_details.groupBy("naics3", "naics6") \
                            .count() \
                            .orderBy("naics3", "count", ascending=False)

print("\nTop NAICS6 codes within NAICS3 423 and 444:")
display(naics6_counts.limit(20))

# 3. Check for updated descriptions
updated_descriptions = naics_details.filter(
    col("naics3_description").like("Reason value of Other%")
)

print("\nRecords with updated 'Other' descriptions:")
display(updated_descriptions.select("naics3", "naics6", "naics3_description").distinct())

# 4. Show examples of actual records for each
print("\nSample records for NAICS3 = 423:")
display(naics_details.filter(col("naics3") == "423").limit(5))

print("\nSample records for NAICS3 = 444:")
display(naics_details.filter(col("naics3") == "444").limit(5))

# COMMAND ----------
