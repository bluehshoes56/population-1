#trhg

# COMMAND ----------
# Create Clean, Readable Cohort Analysis with Pivot Tables and File Export

print("Creating clean, readable cohort analysis outputs...")

# COMMAND ----------
# 1. Create a clean pivot table - Months as columns, Metrics as rows

cohort_pivot_table = spark.sql("""
WITH cohort_data AS (
    SELECT 
        CONCAT(SUBSTR(CAST(reference_month AS STRING), 1, 4), '-', 
               SUBSTR(CAST(reference_month AS STRING), 5, 2)) as month,
        reference_month,
        active_merchants,
        full_presence_merchants,
        pct_active_retention,
        pct_full_presence_retention,
        total_cohort_sales
    FROM cohort_retention_analysis
    ORDER BY reference_month
)
SELECT 
    'Active Merchants' as metric,
    MAX(CASE WHEN month = '2020-02' THEN active_merchants END) as feb_2020,
    MAX(CASE WHEN month = '2020-03' THEN active_merchants END) as mar_2020,
    MAX(CASE WHEN month = '2020-04' THEN active_merchants END) as apr_2020,
    MAX(CASE WHEN month = '2020-05' THEN active_merchants END) as may_2020,
    MAX(CASE WHEN month = '2020-06' THEN active_merchants END) as jun_2020,
    MAX(CASE WHEN month = '2020-12' THEN active_merchants END) as dec_2020,
    MAX(CASE WHEN month = '2021-06' THEN active_merchants END) as jun_2021,
    MAX(CASE WHEN month = '2021-12' THEN active_merchants END) as dec_2021,
    MAX(CASE WHEN month = '2022-06' THEN active_merchants END) as jun_2022,
    MAX(CASE WHEN month = '2022-12' THEN active_merchants END) as dec_2022,
    MAX(CASE WHEN month = '2023-06' THEN active_merchants END) as jun_2023,
    MAX(CASE WHEN month = '2023-12' THEN active_merchants END) as dec_2023,
    MAX(CASE WHEN month = '2024-06' THEN active_merchants END) as jun_2024,
    MAX(CASE WHEN month = '2024-12' THEN active_merchants END) as dec_2024,
    MAX(CASE WHEN month = '2025-04' THEN active_merchants END) as apr_2025
FROM cohort_data

UNION ALL

SELECT 
    'Active Retention %' as metric,
    MAX(CASE WHEN month = '2020-02' THEN pct_active_retention END) as feb_2020,
    MAX(CASE WHEN month = '2020-03' THEN pct_active_retention END) as mar_2020,
    MAX(CASE WHEN month = '2020-04' THEN pct_active_retention END) as apr_2020,
    MAX(CASE WHEN month = '2020-05' THEN pct_active_retention END) as may_2020,
    MAX(CASE WHEN month = '2020-06' THEN pct_active_retention END) as jun_2020,
    MAX(CASE WHEN month = '2020-12' THEN pct_active_retention END) as dec_2020,
    MAX(CASE WHEN month = '2021-06' THEN pct_active_retention END) as jun_2021,
    MAX(CASE WHEN month = '2021-12' THEN pct_active_retention END) as dec_2021,
    MAX(CASE WHEN month = '2022-06' THEN pct_active_retention END) as jun_2022,
    MAX(CASE WHEN month = '2022-12' THEN pct_active_retention END) as dec_2022,
    MAX(CASE WHEN month = '2023-06' THEN pct_active_retention END) as jun_2023,
    MAX(CASE WHEN month = '2023-12' THEN pct_active_retention END) as dec_2023,
    MAX(CASE WHEN month = '2024-06' THEN pct_active_retention END) as jun_2024,
    MAX(CASE WHEN month = '2024-12' THEN pct_active_retention END) as dec_2024,
    MAX(CASE WHEN month = '2025-04' THEN pct_active_retention END) as apr_2025
FROM cohort_data

UNION ALL

SELECT 
    'Full Presence Merchants' as metric,
    MAX(CASE WHEN month = '2020-02' THEN full_presence_merchants END) as feb_2020,
    MAX(CASE WHEN month = '2020-03' THEN full_presence_merchants END) as mar_2020,
    MAX(CASE WHEN month = '2020-04' THEN full_presence_merchants END) as apr_2020,
    MAX(CASE WHEN month = '2020-05' THEN full_presence_merchants END) as may_2020,
    MAX(CASE WHEN month = '2020-06' THEN full_presence_merchants END) as jun_2020,
    MAX(CASE WHEN month = '2020-12' THEN full_presence_merchants END) as dec_2020,
    MAX(CASE WHEN month = '2021-06' THEN full_presence_merchants END) as jun_2021,
    MAX(CASE WHEN month = '2021-12' THEN full_presence_merchants END) as dec_2021,
    MAX(CASE WHEN month = '2022-06' THEN full_presence_merchants END) as jun_2022,
    MAX(CASE WHEN month = '2022-12' THEN full_presence_merchants END) as dec_2022,
    MAX(CASE WHEN month = '2023-06' THEN full_presence_merchants END) as jun_2023,
    MAX(CASE WHEN month = '2023-12' THEN full_presence_merchants END) as dec_2023,
    MAX(CASE WHEN month = '2024-06' THEN full_presence_merchants END) as jun_2024,
    MAX(CASE WHEN month = '2024-12' THEN full_presence_merchants END) as dec_2024,
    MAX(CASE WHEN month = '2025-04' THEN full_presence_merchants END) as apr_2025
FROM cohort_data

UNION ALL

SELECT 
    'Full Presence Retention %' as metric,
    MAX(CASE WHEN month = '2020-02' THEN pct_full_presence_retention END) as feb_2020,
    MAX(CASE WHEN month = '2020-03' THEN pct_full_presence_retention END) as mar_2020,
    MAX(CASE WHEN month = '2020-04' THEN pct_full_presence_retention END) as apr_2020,
    MAX(CASE WHEN month = '2020-05' THEN pct_full_presence_retention END) as may_2020,
    MAX(CASE WHEN month = '2020-06' THEN pct_full_presence_retention END) as jun_2020,
    MAX(CASE WHEN month = '2020-12' THEN pct_full_presence_retention END) as dec_2020,
    MAX(CASE WHEN month = '2021-06' THEN pct_full_presence_retention END) as jun_2021,
    MAX(CASE WHEN month = '2021-12' THEN pct_full_presence_retention END) as dec_2021,
    MAX(CASE WHEN month = '2022-06' THEN pct_full_presence_retention END) as jun_2022,
    MAX(CASE WHEN month = '2022-12' THEN pct_full_presence_retention END) as dec_2022,
    MAX(CASE WHEN month = '2023-06' THEN pct_full_presence_retention END) as jun_2023,
    MAX(CASE WHEN month = '2023-12' THEN pct_full_presence_retention END) as dec_2023,
    MAX(CASE WHEN month = '2024-06' THEN pct_full_presence_retention END) as jun_2024,
    MAX(CASE WHEN month = '2024-12' THEN pct_full_presence_retention END) as dec_2024,
    MAX(CASE WHEN month = '2025-04' THEN pct_full_presence_retention END) as apr_2025
FROM cohort_data

ORDER BY 
    CASE metric 
        WHEN 'Active Merchants' THEN 1
        WHEN 'Active Retention %' THEN 2  
        WHEN 'Full Presence Merchants' THEN 3
        WHEN 'Full Presence Retention %' THEN 4
    END
""")

cohort_pivot_table.createOrReplaceTempView("cohort_pivot_table")

print("Clean Cohort Pivot Table (Key Months):")
cohort_pivot_table.show(10, truncate=False)

# COMMAND ----------
# 2. Create monthly time series in clean format

cohort_monthly_clean = spark.sql("""
SELECT 
    CONCAT(SUBSTR(CAST(reference_month AS STRING), 1, 4), '-', 
           SUBSTR(CAST(reference_month AS STRING), 5, 2)) as month,
    FORMAT_NUMBER(active_merchants, 0) as active_merchants,
    CONCAT(ROUND(pct_active_retention, 1), '%') as active_retention_pct,
    FORMAT_NUMBER(full_presence_merchants, 0) as full_presence_merchants,
    CONCAT(ROUND(pct_full_presence_retention, 1), '%') as full_presence_retention_pct,
    FORMAT_NUMBER(inactive_merchants, 0) as lost_merchants,
    CONCAT(ROUND(pct_lost, 1), '%') as lost_pct,
    
    -- Sales metrics
    CASE 
        WHEN total_cohort_sales >= 1000000000 THEN CONCAT(ROUND(total_cohort_sales/1000000000, 1), 'B')
        WHEN total_cohort_sales >= 1000000 THEN CONCAT(ROUND(total_cohort_sales/1000000, 1), 'M')
        WHEN total_cohort_sales >= 1000 THEN CONCAT(ROUND(total_cohort_sales/1000, 1), 'K')
        ELSE FORMAT_NUMBER(total_cohort_sales, 0)
    END as total_sales_formatted,
    
    CASE 
        WHEN avg_sales_per_active_merchant >= 1000000 THEN CONCAT(ROUND(avg_sales_per_active_merchant/1000000, 1), 'M')
        WHEN avg_sales_per_active_merchant >= 1000 THEN CONCAT(ROUND(avg_sales_per_active_merchant/1000, 1), 'K')
        ELSE FORMAT_NUMBER(avg_sales_per_active_merchant, 0)
    END as avg_sales_per_merchant

FROM cohort_retention_analysis
ORDER BY reference_month
""")

cohort_monthly_clean.createOrReplaceTempView("cohort_monthly_clean")

print("Monthly Cohort Tracking (Clean Format):")
cohort_monthly_clean.show(50, truncate=False)

# COMMAND ----------
# 3. Create summary by year for easier reading

cohort_yearly_summary = spark.sql("""
WITH yearly_data AS (
    SELECT 
        SUBSTR(CAST(reference_month AS STRING), 1, 4) as year,
        reference_month,
        active_merchants,
        pct_active_retention,
        full_presence_merchants,
        pct_full_presence_retention,
        total_cohort_sales,
        ROW_NUMBER() OVER (PARTITION BY SUBSTR(CAST(reference_month AS STRING), 1, 4) ORDER BY reference_month DESC) as rn
    FROM cohort_retention_analysis
)
SELECT 
    year,
    FORMAT_NUMBER(active_merchants, 0) as year_end_active_merchants,
    CONCAT(ROUND(pct_active_retention, 1), '%') as year_end_active_retention,
    FORMAT_NUMBER(full_presence_merchants, 0) as year_end_full_presence,
    CONCAT(ROUND(pct_full_presence_retention, 1), '%') as year_end_full_retention,
    
    CASE 
        WHEN total_cohort_sales >= 1000000000 THEN CONCAT(ROUND(total_cohort_sales/1000000000, 1), 'B')
        WHEN total_cohort_sales >= 1000000 THEN CONCAT(ROUND(total_cohort_sales/1000000, 1), 'M')
        ELSE CONCAT(ROUND(total_cohort_sales/1000, 1), 'K')
    END as year_end_total_sales,
    
    -- Calculate year-over-year change
    LAG(pct_active_retention) OVER (ORDER BY year) as prev_year_retention,
    ROUND(pct_active_retention - LAG(pct_active_retention) OVER (ORDER BY year), 1) as retention_change_yoy

FROM yearly_data 
WHERE rn = 1  -- Latest month of each year
ORDER BY year
""")

cohort_yearly_summary.createOrReplaceTempView("cohort_yearly_summary")

print("Yearly Summary (Year-End Numbers):")
cohort_yearly_summary.show(10, truncate=False)

# COMMAND ----------
# 4. Export to files in the output folder

# Define output path
output_path = "abfss://df-dcs-ext-ind-ds-utils@azpdatafactoryprodadls.dfs.core.windows.net/FSBI/spendtrend/cohort_analysis/"

print(f"Exporting cohort analysis files to: {output_path}")

# Export 1: Monthly time series
cohort_retention_analysis.coalesce(1).write.mode("overwrite").option("header", "true").csv(f"{output_path}cohort_monthly_timeseries")

# Export 2: Clean formatted monthly data
cohort_monthly_clean.coalesce(1).write.mode("overwrite").option("header", "true").csv(f"{output_path}cohort_monthly_clean")

# Export 3: Pivot table
cohort_pivot_table.coalesce(1).write.mode("overwrite").option("header", "true").csv(f"{output_path}cohort_pivot_table")

# Export 4: Yearly summary
cohort_yearly_summary.coalesce(1).write.mode("overwrite").option("header", "true").csv(f"{output_path}cohort_yearly_summary")

# Export 5: NAICS breakdown
cohort_by_naics.coalesce(1).write.mode("overwrite").option("header", "true").csv(f"{output_path}cohort_by_naics")

print("Files exported successfully!")

# COMMAND ----------
# 5. Create an Excel-style summary table for copy-paste

excel_style_summary = spark.sql("""
SELECT 
    'Feb 2020 Baseline' as period,
    baseline_count as merchants,
    '100.0' as retention_pct,
    'Starting Cohort' as notes
FROM (SELECT MAX(total_cohort_merchants) as baseline_count FROM cohort_tracking WHERE reference_month = 202002)

UNION ALL

SELECT 
    'Dec 2020' as period,
    active_merchants as merchants,
    CAST(pct_active_retention AS STRING) as retention_pct,
    'End of COVID Year' as notes
FROM cohort_retention_analysis WHERE reference_month = 202012

UNION ALL

SELECT 
    'Dec 2021' as period,
    active_merchants as merchants,
    CAST(pct_active_retention AS STRING) as retention_pct,
    'Recovery Year' as notes
FROM cohort_retention_analysis WHERE reference_month = 202112

UNION ALL

SELECT 
    'Dec 2022' as period,
    active_merchants as merchants,
    CAST(pct_active_retention AS STRING) as retention_pct,
    'Normalization Year' as notes
FROM cohort_retention_analysis WHERE reference_month = 202212

UNION ALL

SELECT 
    'Dec 2023' as period,
    active_merchants as merchants,
    CAST(pct_active_retention AS STRING) as retention_pct,
    'Stable Period' as notes
FROM cohort_retention_analysis WHERE reference_month = 202312

UNION ALL

SELECT 
    'Apr 2025' as period,
    active_merchants as merchants,
    CAST(pct_active_retention AS STRING) as retention_pct,
    'Latest Available' as notes
FROM cohort_retention_analysis 
WHERE reference_month = (SELECT MAX(reference_month) FROM cohort_retention_analysis)

ORDER BY 
    CASE period
        WHEN 'Feb 2020 Baseline' THEN 1
        WHEN 'Dec 2020' THEN 2
        WHEN 'Dec 2021' THEN 3
        WHEN 'Dec 2022' THEN 4
        WHEN 'Dec 2023' THEN 5
        WHEN 'Apr 2025' THEN 6
    END
""")

excel_style_summary.createOrReplaceTempView("excel_style_summary")

print("Excel-Style Summary (Copy-Paste Ready):")
excel_style_summary.show(10, truncate=False)

# COMMAND ----------
# 6. Final readable dashboard table

final_dashboard_table = spark.sql("""
SELECT 
    month,
    active_merchants,
    active_retention_pct,
    full_presence_merchants,
    full_presence_retention_pct,
    lost_merchants,
    total_sales_formatted,
    avg_sales_per_merchant
FROM cohort_monthly_clean
WHERE month IN ('2020-02', '2020-06', '2020-12', '2021-06', '2021-12', 
                '2022-06', '2022-12', '2023-06', '2023-12', '2024-06', '2024-12', '2025-04')
ORDER BY month
""")

print("Final Dashboard Table (Key Periods):")
final_dashboard_table.show(20, truncate=False)

print("""
Clean, Readable Cohort Analysis Complete!

Views Created:
1. cohort_pivot_table - Pivot format with metrics as rows, months as columns
2. cohort_monthly_clean - Clean monthly format with formatted numbers
3. cohort_yearly_summary - Year-end summaries with year-over-year changes
4. excel_style_summary - Key milestones for copy-paste
5. final_dashboard_table - Dashboard-ready key periods

Files Exported to Output Folder:
- cohort_monthly_timeseries.csv - Raw monthly data
- cohort_monthly_clean.csv - Formatted monthly data  
- cohort_pivot_table.csv - Pivot table format
- cohort_yearly_summary.csv - Yearly summaries
- cohort_by_naics.csv - Industry breakdown

Key Insights Available:
- Feb 2020 baseline cohort tracking through Apr 2025
- Active merchant retention percentages
- Full presence (14-month) retention rates
- Sales performance of remaining merchants
- Industry-level retention analysis

Use these clean formats for presentations and dashboards!
""")

# COMMAND ----------
